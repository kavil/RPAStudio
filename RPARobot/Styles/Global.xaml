<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:libs="clr-namespace:RPARobot.Librarys"
                    xmlns:a="clr-namespace:Plugins.Shared.Library.Attached;assembly=Plugins.Shared.Library">
    <!--设置全局样式，全局引用-->
    <libs:BoolVisibilityConverter x:Key="BoolVisibilityConverter"/>
    <libs:BoolNotVisibilityConverter x:Key="BoolNotVisibilityConverter"/>
    <libs:BoolCollapsedConverter x:Key="BoolCollapsedConverter"/>
    <libs:BoolNotCollapsedConverter x:Key="BoolNotCollapsedConverter"/>
    <libs:NullImageConverter x:Key="NullImageConverter"/>
    <libs:SingleLineTextConverter x:Key="SingleLineTextConverter"/>
    <libs:SingleLineWithSpaceCombineTextConverter x:Key="SingleLineWithSpaceCombineTextConverter"/>
    <libs:BoolNotConverter x:Key="BoolNotConverter"/>
    <libs:CreatingModeToBoolConverter x:Key="CreatingModeToBoolConverter"/>
    <libs:EffectiveTimeToBoolConverter x:Key="EffectiveTimeToBoolConverter"/>
    <libs:CycleIsMonthlyOrWeeklyConverter x:Key="CycleIsMonthlyOrWeeklyConverter"/>
    <libs:VisibilityIfCustomModeConverter x:Key="VisibilityIfCustomModeConverter"/>
    <libs:VisibilityIfQuickModeConverter x:Key="VisibilityIfQuickModeConverter"/>
    <libs:VisibilityCycleIfNotOnlyOnceConverter x:Key="VisibilityCycleIfNotOnlyOnceConverter"/>
    <libs:VisibilityCycleIfOnlyOnceConverter x:Key="VisibilityCycleIfOnlyOnceConverter"/>

    <SolidColorBrush x:Key="PrimaryColor">#FF001D26</SolidColorBrush>
    <SolidColorBrush x:Key="PrimaryColor80">#CC001D26</SolidColorBrush>
    <SolidColorBrush x:Key="TextSelectionBrush">#FF001D26</SolidColorBrush>
    <SolidColorBrush x:Key="FocusBorderBrush">#FFEFEFEF</SolidColorBrush>
    <SolidColorBrush x:Key="MouseOverBorderBrush">#FF001D26</SolidColorBrush>
    <SolidColorBrush x:Key="TextBackground">#FFFFFFFF</SolidColorBrush>
    <SolidColorBrush x:Key="TextForeground">#FF000000</SolidColorBrush>
    <SolidColorBrush x:Key="ControlBorderBrush">#FF001D26</SolidColorBrush>
    
    <Style TargetType="MenuItem">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type libs:ButtonThreeState}">
        <Setter Property="ToolTipService.InitialShowDelay" Value="1000"/>
        <Setter Property="Foreground" Value="{Binding def_foreground, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type libs:ButtonThreeState}">
                    <Grid>
                        <Image x:Name="btnbg" Source="{Binding def, RelativeSource={RelativeSource TemplatedParent}}" />
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source"  Value="{Binding hover, RelativeSource={RelativeSource TemplatedParent}}" TargetName="btnbg" />
                            <Setter Property="Foreground" Value="{Binding hover_foreground, RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="{Binding active, RelativeSource={RelativeSource TemplatedParent}}" TargetName="btnbg" />
                            <Setter Property="Foreground" Value="{Binding click_foreground, RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Source" Value="{Binding forbid, RelativeSource={RelativeSource TemplatedParent}}" TargetName="btnbg"/>
                            <Setter Property="Foreground" Value="{Binding forbid_foreground, RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <Trigger Property="ToolTip" Value="">
                            <Setter Property="ToolTipService.IsEnabled" Value="False"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type libs:ColorButtonThreeState}">
        <Setter Property="ToolTipService.InitialShowDelay" Value="1000"/>
        <Setter Property="Foreground" Value="{Binding def_foreground, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type libs:ColorButtonThreeState}">
                    <Grid>
                        <Border x:Name="btnbg" Background="{Binding def, RelativeSource={RelativeSource TemplatedParent}}" />
                        <StackPanel Orientation="Horizontal">
                            <Image x:Name="btnimg" Margin="2" Source="{Binding def_img, RelativeSource={RelativeSource TemplatedParent}}" />
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background"  Value="{Binding hover, RelativeSource={RelativeSource TemplatedParent}}" TargetName="btnbg" />
                            <Setter Property="Foreground" Value="{Binding hover_foreground, RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{Binding active, RelativeSource={RelativeSource TemplatedParent}}" TargetName="btnbg" />
                            <Setter Property="Foreground" Value="{Binding click_foreground, RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{Binding forbid, RelativeSource={RelativeSource TemplatedParent}}" TargetName="btnbg"/>
                            <Setter Property="Foreground" Value="{Binding forbid_foreground, RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <Trigger Property="ToolTip" Value="">
                            <Setter Property="ToolTipService.IsEnabled" Value="False"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <ContextMenu x:Key="PackageItemContextMenu">
        <MenuItem Header="复制信息"  Command="{Binding CopyItemInfoCommand}" CommandParameter="{Binding}"/>
        <MenuItem Header="定位当前包"  Command="{Binding LocateItemCommand}" CommandParameter="{Binding}"/>
        <Separator />
        <MenuItem Header="移除当前包"  Command="{Binding RemoveItemCommand}" CommandParameter="{Binding}"/>
    </ContextMenu>

    <Style TargetType="TextBox" x:Key="Input">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="#EFEFEF"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--TextBox默认样式-->
    <Style TargetType="{x:Type TextBox}" x:Key="DefaultTextBox">
        <Setter Property="ContextMenu" Value="{DynamicResource TextBoxContextMenu}" />
        <Setter Property="SelectionBrush" Value="{StaticResource TextSelectionBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="MinHeight" Value="26" />
        <Setter Property="Width" Value="100" />
        <Setter Property="Background" Value="{StaticResource TextBackground}" />
        <Setter Property="Foreground" Value="{StaticResource TextForeground}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderBrush" Value="{StaticResource ControlBorderBrush}" />
        <Setter Property="a:ControlAttachProperty.FocusBorderBrush" Value="{StaticResource FocusBorderBrush}" />
        <Setter Property="a:ControlAttachProperty.MouseOverBorderBrush" Value="{StaticResource MouseOverBorderBrush}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <!-- change SnapsToDevicePixels to True to view a better border and validation error -->
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <!--英 ['kærət]  美 ['kærət]  插入符号-->
        <Setter Property="CaretBrush" Value="{StaticResource TextForeground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid x:Name="PART_Root">
                        <Border x:Name="Bg" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                CornerRadius="{TemplateBinding a:ControlAttachProperty.CornerRadius}"
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" />
                        <Grid x:Name="PART_InnerGrid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition  Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition  Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <!--Label区域-->
                            <ContentControl x:Name="Label" Margin="1" Template="{TemplateBinding a:ControlAttachProperty.LabelTemplate}"
                                            Content="{TemplateBinding a:ControlAttachProperty.Label}"/>
                            <!--内容区域-->
                            <ScrollViewer x:Name="PART_ContentHost" BorderThickness="0" Grid.Column="1" IsTabStop="False" Margin="2"
                                          VerticalAlignment="Stretch" Background="{x:Null}" />
                            <!--水印-->
                            <TextBlock x:Name="Message" 
                                       Padding="{TemplateBinding Padding}" 
                                       Visibility="Collapsed"
                                       Text="{TemplateBinding a:ControlAttachProperty.Watermark}"
                                       Grid.Column="1"
                                       Foreground="{TemplateBinding Foreground}" IsHitTestVisible="False" 
                                       Opacity=".5"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                       Margin="5,2,5,2" />
                            <!--附加内容区域-->
                            <Border x:Name="PART_AttachContent" Grid.Column="2" Margin="2" VerticalAlignment="Center" HorizontalAlignment="Center" >
                                <ContentControl VerticalAlignment="Center" VerticalContentAlignment="Center" Template="{TemplateBinding a:ControlAttachProperty.AttachContent}" />
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--显示水印-->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                            <Setter TargetName="Message" Property="Visibility" Value="Visible" />
                        </DataTrigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{Binding Path=(a:ControlAttachProperty.MouseOverBorderBrush),RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter  Property="BorderBrush" Value="{Binding Path=(a:ControlAttachProperty.FocusBorderBrush),RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <!--不可用-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Root" Property="Opacity" Value="{StaticResource DisableOpacity}" />
                        </Trigger>
                        <!--只读时，禁用PART_AttachContent-->
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="PART_AttachContent" Property="IsEnabled" Value="False" />
                            <Setter TargetName="Bg" Property="Opacity" Value="{StaticResource ReadonlyOpacity}" />
                            <Setter TargetName="PART_ContentHost" Property="Opacity" Value="{StaticResource ReadonlyOpacity}" />
                            <Setter TargetName="Label" Property="Opacity" Value="{StaticResource ReadonlyOpacity}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>