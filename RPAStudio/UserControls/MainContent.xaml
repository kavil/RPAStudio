<UserControl x:Class="RPAStudio.UserControls.MainContent"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:RPAStudio"
             xmlns:uc="clr-namespace:RPAStudio.UserControls"
             xmlns:fluent= "urn:fluent-ribbon"
             xmlns:gif="http://wpfanimatedgif.codeplex.com"
             xmlns:l="clr-namespace:RPAStudio.Localization"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
             DataContext="{Binding Main, Source={StaticResource Locator}}"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <fluent:Ribbon AutomaticStateManagement="True" Visibility="{Binding IsOpenStartScreen,Mode=OneWay, Converter={StaticResource BoolNotVisibilityConverter}}">
            <fluent:Ribbon.Menu>
                <Grid>
                    <fluent:Backstage Header="{x:Static l:strings.main_start}" IsEnabled="{Binding IsWorkflowRunningOrDebugging,Mode=OneWay, Converter={StaticResource BoolNotConverter}}" IsOpen="{Binding IsOpenStartScreen,Mode=TwoWay}" CloseOnEsc="{Binding IsBackButtonVisible}" AreAnimationsEnabled="{Binding IsBackButtonVisible}" >
                        <Grid>
                            <fluent:BackstageTabControl  ItemsPanelMinWidth="160" SelectedIndex="3" IsBackButtonVisible="{Binding IsBackButtonVisible}">
                                <fluent:Button Header="{x:Static l:strings.main_open}" Command="{Binding SelectProjectCommand}" IsDefinitive="False" />
                                <fluent:Button Header="{x:Static l:strings.main_close}" Command="{Binding CloseProjectCommand}" IsDefinitive="False" />
                                
                                <fluent:SeparatorTabItem />
                                
                                <fluent:BackstageTabItem Header="{x:Static l:strings.main_start}">
                                    <uc:StartContent/>
                                </fluent:BackstageTabItem>
                                <!--<fluent:BackstageTabItem Header="账户"></fluent:BackstageTabItem>-->
                                <fluent:BackstageTabItem Header="{x:Static l:strings.main_settings}" >
                                    <uc:SettingsContent/>
                                </fluent:BackstageTabItem>
                                <fluent:BackstageTabItem Header="{x:Static l:strings.main_help}" >
                                    <uc:HelpContent/>
                                </fluent:BackstageTabItem>
                                <!--<fluent:BackstageTabItem >
                                    <fluent:BackstageTabItem.Header>
                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock Text="{x:Static l:strings.main_update}"/>
                                            <Border Visibility="{Binding IsNeedUpgrade,Mode=OneWay, Converter={StaticResource BoolCollapsedConverter}}" CornerRadius="5" Width="10" Height="10" Background="Red" Margin="3,0,0,0"></Border>
                                        </StackPanel>
                                    </fluent:BackstageTabItem.Header>
                                    <uc:CheckUpgradeContent/>
                                </fluent:BackstageTabItem>-->
                            </fluent:BackstageTabControl>

                            <!--起始页遮罩层-->
                            <Grid Visibility="{Binding IsStartContentBusy,Mode=OneWay, Converter={StaticResource BoolVisibilityConverter}}" Margin="0,30,0,0">
                                <Grid Background="#AA001D26" Opacity="0.5" Visibility="Visible">
                                </Grid>
                                <Border BorderBrush="#ababab" BorderThickness="1" HorizontalAlignment="Center" VerticalAlignment="Center" Width="360" Height="120" Background="White" >
                                    <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                                        <Image Width="40" Height="40" gif:ImageBehavior.AnimatedSource="pack://application:,,,/Resources/Image/Ribbon/loading.gif"/>
                                        <TextBlock FontSize="15" Margin="0,10,0,0" Text="{x:Static l:strings.main_loading}"/>
                                    </StackPanel>

                                </Border>
                            </Grid>
                        </Grid>

                    </fluent:Backstage>
                </Grid>
            </fluent:Ribbon.Menu>
            <fluent:Ribbon.ToolBarItems>
                <!--<fluent:Button Size="Small" Icon="pack://application:,,,/Resources/Image/Ribbon/help.png" ToolTip="{x:Static l:strings.main_help}" />-->
                <xctk:DropDownButton Content="登录">
                    <xctk:DropDownButton.DropDownContent>
                        <TextBlock>Content</TextBlock>
                    </xctk:DropDownButton.DropDownContent>
                </xctk:DropDownButton>
            </fluent:Ribbon.ToolBarItems>
            <fluent:Ribbon.QuickAccessItems>
                <fluent:QuickAccessMenuItem Target="{Binding Source={x:Reference saveButton}}"
                                            IsChecked="True" />
                <fluent:QuickAccessMenuItem Target="{Binding Source={x:Reference runButton}}"
                                            IsChecked="True" />
                <fluent:QuickAccessMenuItem Target="{Binding Source={x:Reference stopButton}}"
                                            IsChecked="True" />
            </fluent:Ribbon.QuickAccessItems>
            <fluent:RibbonTabItem Header="{x:Static l:strings.main_design}">
                <fluent:RibbonGroupBox Header="{x:Static l:strings.main_file}" 
                                       IsEnabled="{Binding IsWorkflowRunningOrDebugging,Mode=OneWay, Converter={StaticResource BoolNotConverter}}">
                    <fluent:DropDownButton  Header="{x:Static l:strings.main_new}"
                                           LargeIcon="pack://application:,,,/Resources/Image/Ribbon/new.png"
                                           IsEnabled="True"
                                           VerticalAlignment="Top">
                        <fluent:MenuItem Header="{x:Static l:strings.main_sequence}" 
                                         Icon="pack://application:,,,/Resources/Image/Ribbon/sequence.png"
                                         Command="{Binding NewSequenceDocumentCommand}"
                                         ToolTip="{x:Static l:strings.main_sequence_tip}"
                                        />
                        <fluent:MenuItem Header="{x:Static l:strings.main_flowchart}" 
                                         Icon="pack://application:,,,/Resources/Image/Ribbon/flowchart.png"
                                         Command="{Binding NewFlowchartDocumentCommand}"
                                         ToolTip="{x:Static l:strings.main_flowchart}"
                                        />
                        <fluent:MenuItem Header="{x:Static l:strings.main_state_machine}" 
                                         Icon="pack://application:,,,/Resources/Image/Ribbon/state-machine.png"
                                         Command="{Binding NewStateMachineDocumentCommand}"
                                         ToolTip="{x:Static l:strings.main_state_machine}"
                                        />
                        <!--<fluent:MenuItem Header="全局处理器" 
                                         Icon="pack://application:,,,/Resources/Image/Ribbon/global-handler.png"
                                         Command="{Binding NewGlobalHandlerDocumentCommand}"
                                         ToolTip="全局处理器"
                                        />-->
                    </fluent:DropDownButton>
                    <fluent:SplitButton x:Name="saveButton" 
                                        Header="{x:Static l:strings.main_save}" 
                                        ToolTip="{x:Static l:strings.main_save_tip}"
                                        Icon="pack://application:,,,/Resources/Image/Ribbon/save.png"
                                        LargeIcon="pack://application:,,,/Resources/Image/Ribbon/save.png"
                                        Command="{Binding SaveCommand}"
                                        IsEnabled="{Binding IsDocumentExist}"
                                        FocusManager.IsFocusScope="True">
                        <fluent:MenuItem Header="{x:Static l:strings.main_save_as}" 
                                         Icon="pack://application:,,,/Resources/Image/Ribbon/save-as.png"
                                         Command="{Binding SaveAsCommand}"
                                        />
                        <fluent:MenuItem Header="{x:Static l:strings.main_save_all}" 
                                         ToolTip="{x:Static l:strings.main_save_all_tip}"
                                         Icon="pack://application:,,,/Resources/Image/Ribbon/save-all.png"
                                         Command="{Binding SaveAllCommand}"
                                        />
                    </fluent:SplitButton>
                    <!--<fluent:Button Header="另存为 模板" 
                                   LargeIcon="pack://application:,,,/Resources/Image/Ribbon/template.png"
                                   />-->
                    <fluent:Button Header="{x:Static l:strings.main_run}"
                                   LargeIcon="pack://application:,,,/Resources/Image/Ribbon/run.png"
                                   Command="{Binding RunWorkflowCommand}"
                                   ToolTip="{x:Static l:strings.main_run_tip}"
                                   />
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="{x:Static l:strings.main_edit}" 
                                       IsEnabled="{Binding IsWorkflowRunningOrDebugging,Mode=OneWay, Converter={StaticResource BoolNotConverter}}">
                    <fluent:Button Header="{x:Static l:strings.main_cut}"
                                   Icon="pack://application:,,,/Resources/Image/Ribbon/cut.png"
                                   SizeDefinition="Middle,Small"
                                   Command="{Binding CutCommand}" CommandTarget="{Binding CurrentDesignerView}"
                                   FocusManager.IsFocusScope="True" >
                    </fluent:Button>
                    <fluent:Button Header="{x:Static l:strings.main_copy}"
                                   Icon="pack://application:,,,/Resources/Image/Ribbon/copy.png"
                                   SizeDefinition="Middle,Small"
                                   Command="{Binding CopyCommand}" CommandTarget="{Binding CurrentDesignerView}"
                                   FocusManager.IsFocusScope="True" >
                    </fluent:Button>
                    <fluent:Button Header="{x:Static l:strings.main_paste}"
                                   Icon="pack://application:,,,/Resources/Image/Ribbon/paste.png"
                                   SizeDefinition="Middle,Small"
                                   Command="{Binding PasteCommand}" CommandTarget="{Binding CurrentDesignerView}"
                                   FocusManager.IsFocusScope="True" >
                    </fluent:Button>
                </fluent:RibbonGroupBox>
                <!--<fluent:RibbonGroupBox Header="选择器">
                    <fluent:Button Header="UI 浏览器" 
                                   LargeIcon="pack://application:,,,/Resources/Image/Ribbon/ui-explorer.png"
                                   Command="{Binding LaunchUIExplorerCommand}"
                                   ToolTip="运行UI浏览器"
                                   />
                </fluent:RibbonGroupBox>-->
                <fluent:RibbonGroupBox Header="{x:Static l:strings.main_dependency}">
                    <fluent:Button Header="{x:Static l:strings.main_package_manager}" 
                                   LargeIcon="pack://application:,,,/Resources/Image/Ribbon/package-manager.png"
                                   Command="{Binding LaunchPackageManagerCommand}"
                                   ToolTip="{x:Static l:strings.main_package_manager_tip}"
                                   />
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="{x:Static l:strings.main_operation}">
                    <fluent:Button Header="{x:Static l:strings.main_recording}"
                                   LargeIcon="pack://application:,,,/Resources/Image/Ribbon/recording.png"
                                   Command="{Binding RecordingCommand}"
                                   ToolTip="{x:Static l:strings.main_recording_tip}"
                                   />
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="{x:Static l:strings.main_deploy}" 
                                       IsEnabled="{Binding IsWorkflowRunningOrDebugging,Mode=OneWay, Converter={StaticResource BoolNotConverter}}">
                    <fluent:Button Header="{x:Static l:strings.main_publish}" 
                                   LargeIcon="pack://application:,,,/Resources/Image/Ribbon/publish.png"
                                   Command="{Binding PublishCommand}"
                                   ToolTip="{x:Static l:strings.main_publish_tip}"
                                   />
                </fluent:RibbonGroupBox>
            </fluent:RibbonTabItem>
            <fluent:RibbonTabItem Header="{x:Static l:strings.main_execution}">
                <fluent:RibbonGroupBox Header="{x:Static l:strings.main_start_up}">
                    <fluent:Button Header="{x:Static l:strings.main_run}" x:Name="runButton" 
                                   Icon="pack://application:,,,/Resources/Image/Ribbon/run.png"
                                   LargeIcon="pack://application:,,,/Resources/Image/Ribbon/run.png"
                                   Command="{Binding RunWorkflowCommand}"
                                   ToolTip="{x:Static l:strings.main_run_tip}"
                                   />
                    <fluent:Button Header="{x:Static l:strings.main_stop}"
                                   x:Name="stopButton"
                                   Icon="pack://application:,,,/Resources/Image/Ribbon/stop.png"
                                   LargeIcon="pack://application:,,,/Resources/Image/Ribbon/stop.png"
                                   Command="{Binding StopWorkflowCommand}"
                                   ToolTip="{x:Static l:strings.main_stop_tip}"
                                   />
                    <fluent:Button Header="{Binding DebugOrContinueWorkflowButtonHeader}" 
                                   Icon="pack://application:,,,/Resources/Image/Ribbon/debug.png"
                                   LargeIcon="pack://application:,,,/Resources/Image/Ribbon/debug.png"
                                   Command="{Binding DebugOrContinueWorkflowCommand}"
                                   ToolTip="{Binding DebugOrContinueWorkflowButtonToolTip}"
                                   />
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Header="{x:Static l:strings.main_debug}" >
                    <fluent:Button Header="{x:Static l:strings.main_break}"
                                   Icon="pack://application:,,,/Resources/Image/Ribbon/break.png"
                                   SizeDefinition="Middle,Small"
                                   Command="{Binding BreakCommand}"
                                   ToolTip="{x:Static l:strings.main_break_tip}"
                                   FocusManager.IsFocusScope="True" >
                    </fluent:Button>
                    <fluent:Button Header="{x:Static l:strings.main_step_into}"
                                   Icon="pack://application:,,,/Resources/Image/Ribbon/step-into.png"
                                   SizeDefinition="Middle,Small"
                                   ToolTip="{x:Static l:strings.main_step_into_tip}"
                                   Command="{Binding StepIntoCommand}"
                                   FocusManager.IsFocusScope="True" >
                    </fluent:Button>
                    <fluent:Button Header="{x:Static l:strings.main_step_over}"
                                   Icon="pack://application:,,,/Resources/Image/Ribbon/step-over.png"
                                   SizeDefinition="Middle,Small"
                                   ToolTip="{x:Static l:strings.main_step_over_tip}"
                                   Command="{Binding StepOverCommand}"
                                   FocusManager.IsFocusScope="True" >
                    </fluent:Button>
                    <fluent:Button Header="{x:Static l:strings.main_validate}"
                                   Icon="pack://application:,,,/Resources/Image/Ribbon/validate.png"
                                   LargeIcon="pack://application:,,,/Resources/Image/Ribbon/validate.png"
                                   ToolTip="{x:Static l:strings.main_validate_tip}"
                                   Command="{Binding ValidateWorkflowCommand}"
                                   IsEnabled="{Binding IsDocumentExist}"
                                   />
                    <fluent:SplitButton Header="{x:Static l:strings.main_breakpoint}" 
                                        ToolTip="{x:Static l:strings.main_toggle_breakpoint_tip}"
                                        Icon="pack://application:,,,/Resources/Image/Ribbon/breakpoints.png"
                                        LargeIcon="pack://application:,,,/Resources/Image/Ribbon/breakpoints.png"
                                        Command="{Binding ToggleBreakpointCommand}"
                                        IsEnabled="{Binding IsDocumentExist}"
                                        FocusManager.IsFocusScope="True">
                        <fluent:MenuItem Header="{x:Static l:strings.main_toggle_breakpoint}"  
                                         ToolTip="{x:Static l:strings.main_toggle_breakpoint_tip}"
                                         Icon="pack://application:,,,/Resources/Image/Ribbon/breakpoints.png"
                                         Command="{Binding ToggleBreakpointCommand}"
                                        />
                        <fluent:MenuItem Header="{x:Static l:strings.main_remove_all_breakpoints}" 
                                         ToolTip="{x:Static l:strings.main_remove_all_breakpoints_tip}"
                                         Icon="pack://application:,,,/Resources/Image/Ribbon/remove-all-breakpoints.png"
                                         Command="{Binding RemoveAllBreakpointsCommand}"
                                        />
                    </fluent:SplitButton>

                    <fluent:Button Header="{x:Static l:strings.main_slow_debugging}"  
                                   ToolTip="{x:Static l:strings.main_slow_debugging_tip}"
                                   Icon="{Binding SlowStepIcon}"
                                   LargeIcon="{Binding SlowStepIcon}"
                                   Background="{Binding SlowStepBackground}"
                                   Command="{Binding SlowStepCommand}"
                                   IsEnabled="{Binding IsDocumentExist}"
                                   />

                    <fluent:DropDownButton  Header="{x:Static l:strings.main_options}"
                                           LargeIcon="pack://application:,,,/Resources/Image/Ribbon/options.png"
                                           ToolTip="{x:Static l:strings.main_options}"
                                           VerticalAlignment="Top">
                        <fluent:MenuItem Header="{x:Static l:strings.main_highlight_elements}" 
                                         IsCheckable="True"
                                         IsChecked="{Binding IsHighlightElements}"
                                        />
                        <fluent:MenuItem Header="{x:Static l:strings.main_log_activities}"  
                                         IsCheckable="True"
                                         IsChecked="{Binding IsLogActivities}"
                                        />
                        <fluent:MenuItem Header="{x:Static l:strings.main_break_on_exceptions}" 
                                         IsCheckable="True"
                                         IsChecked="{Binding IsBreakOnExceptions}"
                                        />
                    </fluent:DropDownButton>
                </fluent:RibbonGroupBox>

                <fluent:RibbonGroupBox Header="{x:Static l:strings.main_logs}">
                    <fluent:Button Header="{x:Static l:strings.main_open_logs}"
                                   Icon="pack://application:,,,/Resources/Image/Ribbon/open-logs.png"
                                   LargeIcon="pack://application:,,,/Resources/Image/Ribbon/open-logs.png"
                                   ToolTip="{x:Static l:strings.main_open_logs_tip}"
                                   Command="{Binding OpenLogsCommand}"
                                   />
                </fluent:RibbonGroupBox>

            </fluent:RibbonTabItem>
        </fluent:Ribbon>

        <Grid Grid.Row="1" Visibility="{Binding IsOpenStartScreen,Mode=OneWay, Converter={StaticResource BoolNotVisibilityConverter}}">
            <uc:DockContent/>
        </Grid>
        <fluent:StatusBar HorizontalAlignment="Stretch"
                          VerticalAlignment="Bottom"
                          Grid.Row="2">
        </fluent:StatusBar>
    </Grid>
</UserControl>
